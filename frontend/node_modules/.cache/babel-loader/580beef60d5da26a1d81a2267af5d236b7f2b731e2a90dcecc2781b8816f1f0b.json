{"ast":null,"code":"var _jsxFileName = \"C:\\\\HCK\\\\FYP\\\\inventory-management-system\\\\frontend\\\\src\\\\components\\\\common\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  requireAdmin = false\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    isAdmin,\n    loading\n  } = useAuth();\n\n  // If authentication is still loading, show nothing\n  if (loading) {\n    return null;\n  }\n\n  // Check if user is authenticated\n  if (!isAuthenticated()) {\n    // Redirect to login if not authenticated\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if admin role is required but user is not admin\n  if (requireAdmin && !isAdmin) {\n    // Redirect to dashboard if admin access is required but user is not admin\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/dashboard\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If user is authenticated and meets role requirements, render the children\n  return children;\n};\n_s(ProtectedRoute, \"WBNX2TM0OEPsoxNZ/5RgCQC/3sM=\", false, function () {\n  return [useAuth];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Navigate","useAuth","jsxDEV","_jsxDEV","ProtectedRoute","children","requireAdmin","_s","isAuthenticated","isAdmin","loading","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/HCK/FYP/inventory-management-system/frontend/src/components/common/ProtectedRoute.js"],"sourcesContent":["import { Navigate } from 'react-router-dom';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\n\r\nconst ProtectedRoute = ({ children, requireAdmin = false }) => {\r\n  const { isAuthenticated, isAdmin, loading } = useAuth();\r\n\r\n  // If authentication is still loading, show nothing\r\n  if (loading) {\r\n    return null;\r\n  }\r\n\r\n  // Check if user is authenticated\r\n  if (!isAuthenticated()) {\r\n    // Redirect to login if not authenticated\r\n    return <Navigate to=\"/login\" replace />;\r\n  }\r\n\r\n  // Check if admin role is required but user is not admin\r\n  if (requireAdmin && !isAdmin) {\r\n    // Redirect to dashboard if admin access is required but user is not admin\r\n    return <Navigate to=\"/dashboard\" replace />;\r\n  }\r\n\r\n  // If user is authenticated and meets role requirements, render the children\r\n  return children;\r\n};\r\n\r\nexport default ProtectedRoute; "],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,OAAO,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,YAAY,GAAG;AAAM,CAAC,KAAK;EAAAC,EAAA;EAC7D,MAAM;IAAEC,eAAe;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGT,OAAO,CAAC,CAAC;;EAEvD;EACA,IAAIS,OAAO,EAAE;IACX,OAAO,IAAI;EACb;;EAEA;EACA,IAAI,CAACF,eAAe,CAAC,CAAC,EAAE;IACtB;IACA,oBAAOL,OAAA,CAACH,QAAQ;MAACW,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;;EAEA;EACA,IAAIV,YAAY,IAAI,CAACG,OAAO,EAAE;IAC5B;IACA,oBAAON,OAAA,CAACH,QAAQ;MAACW,EAAE,EAAC,YAAY;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC7C;;EAEA;EACA,OAAOX,QAAQ;AACjB,CAAC;AAACE,EAAA,CAtBIH,cAAc;EAAA,QAC4BH,OAAO;AAAA;AAAAgB,EAAA,GADjDb,cAAc;AAwBpB,eAAeA,cAAc;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}