{"ast":null,"code":"var _jsxFileName = \"C:\\\\HCK\\\\FYP\\\\inventory-management-system\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\n// Create the auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Provider component\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [error, setError] = useState('');\n\n  // API URL - should match your backend\n  const API_URL = 'http://localhost:8000';\n  useEffect(() => {\n    // Check if user is logged in (token exists in localStorage)\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        // Validate token and set user\n        const decoded = jwtDecode(token);\n\n        // Check if token is expired\n        if (decoded.exp * 1000 < Date.now()) {\n          localStorage.removeItem('token');\n          setCurrentUser(null);\n          setIsAdmin(false);\n        } else {\n          // Get user info from localStorage if it exists\n          const userInfoString = localStorage.getItem('userInfo');\n          if (userInfoString) {\n            const userInfo = JSON.parse(userInfoString);\n            setCurrentUser(userInfo);\n            setIsAdmin(userInfo.isAdmin || false);\n          } else {\n            // Fallback to just token data\n            setCurrentUser(decoded);\n            setIsAdmin(decoded.isAdmin || false);\n          }\n\n          // Set default auth header for axios\n          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        }\n      } catch (error) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('userInfo');\n        setCurrentUser(null);\n        setIsAdmin(false);\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Login user\n  const login = async (email, password) => {\n    try {\n      setError('');\n      setLoading(true);\n      const response = await axios.post(`${API_URL}/login`, {\n        email,\n        password\n      });\n\n      // Check if response contains an error message\n      if (response.data.error) {\n        setLoading(false);\n        setError(response.data.error);\n        return {\n          success: false,\n          error: response.data.error\n        };\n      }\n\n      // Check if the response has the token\n      if (!response.data.accessToken) {\n        setLoading(false);\n        setError(response.data.message || 'Login failed. No token received.');\n        return {\n          success: false,\n          error: response.data.message || 'Login failed. No token received.'\n        };\n      }\n\n      // Extract data from successful response\n      const token = response.data.accessToken;\n      const userInfo = {\n        id: response.data.ID,\n        email: response.data.email,\n        userName: response.data.userName || response.data.email.split('@')[0],\n        isAdmin: response.data.isAdmin || false // Store isAdmin status from response\n      };\n\n      // Save token and user info to localStorage\n      localStorage.setItem('token', token);\n      localStorage.setItem('userInfo', JSON.stringify(userInfo));\n\n      // Set user in state\n      setCurrentUser(userInfo);\n      setIsAdmin(userInfo.isAdmin); // Set isAdmin state based on response\n\n      // Set default auth header for axios\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      setLoading(false);\n      return {\n        success: true,\n        message: response.data.message || 'Login successful'\n      };\n    } catch (error) {\n      setLoading(false);\n      // Handle network errors or server errors with status codes\n      if (error.response) {\n        // Server responded with error status\n        const errorMsg = error.response.data.error || error.response.data.message || 'Login failed';\n        setError(errorMsg);\n        return {\n          success: false,\n          error: errorMsg\n        };\n      } else if (error.request) {\n        // Request was made but no response received\n        setError('No response from server. Check your connection.');\n        return {\n          success: false,\n          error: 'No response from server. Check your connection.'\n        };\n      } else {\n        // Something else caused the error\n        setError('Failed to login: ' + error.message);\n        return {\n          success: false,\n          error: 'Failed to login: ' + error.message\n        };\n      }\n    }\n  };\n\n  // Register user\n  const register = async (name, email, password) => {\n    try {\n      setError('');\n      setLoading(true);\n      const response = await axios.post(`${API_URL}/register`, {\n        userName: name,\n        email,\n        password\n      });\n      setLoading(false);\n\n      // Check if the response contains an error\n      if (response.data.error) {\n        setError(response.data.error);\n        return {\n          success: false,\n          error: response.data.error\n        };\n      }\n\n      // Success case\n      return {\n        success: true,\n        message: response.data.message || 'User created successfully'\n      };\n    } catch (error) {\n      setLoading(false);\n      // Handle network errors or server errors with status codes\n      if (error.response) {\n        // Server responded with error status\n        const errorMsg = error.response.data.error || error.response.data.message || 'Registration failed';\n        setError(errorMsg);\n        return {\n          success: false,\n          error: errorMsg\n        };\n      } else if (error.request) {\n        // Request was made but no response received\n        setError('No response from server. Check your connection.');\n        return {\n          success: false,\n          error: 'No response from server. Check your connection.'\n        };\n      } else {\n        // Something else caused the error\n        setError('Failed to register: ' + error.message);\n        return {\n          success: false,\n          error: 'Failed to register: ' + error.message\n        };\n      }\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userInfo');\n    setCurrentUser(null);\n    setIsAdmin(false);\n    delete axios.defaults.headers.common['Authorization'];\n  };\n\n  // Check if user is authenticated\n  const isAuthenticated = () => {\n    return !!currentUser;\n  };\n  const value = {\n    currentUser,\n    loading,\n    isAdmin,\n    error,\n    login,\n    register,\n    logout,\n    isAuthenticated\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"JdpwUUvDpff70ZpqRID6MijrJAY=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useContext","useEffect","axios","jwtDecode","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","isAdmin","setIsAdmin","error","setError","API_URL","token","localStorage","getItem","decoded","exp","Date","now","removeItem","userInfoString","userInfo","JSON","parse","defaults","headers","common","login","email","password","response","post","data","success","accessToken","message","id","ID","userName","split","setItem","stringify","errorMsg","request","register","name","logout","isAuthenticated","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/HCK/FYP/inventory-management-system/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import { createContext, useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\n// Create the auth context\r\nconst AuthContext = createContext();\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\n// Provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  // API URL - should match your backend\r\n  const API_URL = 'http://localhost:8000';\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in (token exists in localStorage)\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (token) {\r\n      try {\r\n        // Validate token and set user\r\n        const decoded = jwtDecode(token);\r\n        \r\n        // Check if token is expired\r\n        if (decoded.exp * 1000 < Date.now()) {\r\n          localStorage.removeItem('token');\r\n          setCurrentUser(null);\r\n          setIsAdmin(false);\r\n        } else {\r\n          // Get user info from localStorage if it exists\r\n          const userInfoString = localStorage.getItem('userInfo');\r\n          if (userInfoString) {\r\n            const userInfo = JSON.parse(userInfoString);\r\n            setCurrentUser(userInfo);\r\n            setIsAdmin(userInfo.isAdmin || false);\r\n          } else {\r\n            // Fallback to just token data\r\n            setCurrentUser(decoded);\r\n            setIsAdmin(decoded.isAdmin || false);\r\n          }\r\n          \r\n          // Set default auth header for axios\r\n          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        }\r\n      } catch (error) {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('userInfo');\r\n        setCurrentUser(null);\r\n        setIsAdmin(false);\r\n      }\r\n    }\r\n    \r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Login user\r\n  const login = async (email, password) => {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      const response = await axios.post(`${API_URL}/login`, { email, password });\r\n      \r\n      // Check if response contains an error message\r\n      if (response.data.error) {\r\n        setLoading(false);\r\n        setError(response.data.error);\r\n        return { success: false, error: response.data.error };\r\n      }\r\n      \r\n      // Check if the response has the token\r\n      if (!response.data.accessToken) {\r\n        setLoading(false);\r\n        setError(response.data.message || 'Login failed. No token received.');\r\n        return { success: false, error: response.data.message || 'Login failed. No token received.' };\r\n      }\r\n\r\n      // Extract data from successful response\r\n      const token = response.data.accessToken;\r\n      const userInfo = {\r\n        id: response.data.ID,\r\n        email: response.data.email,\r\n        userName: response.data.userName || response.data.email.split('@')[0],\r\n        isAdmin: response.data.isAdmin || false, // Store isAdmin status from response\r\n      };\r\n      \r\n      // Save token and user info to localStorage\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('userInfo', JSON.stringify(userInfo));\r\n      \r\n      // Set user in state\r\n      setCurrentUser(userInfo);\r\n      setIsAdmin(userInfo.isAdmin); // Set isAdmin state based on response\r\n      \r\n      // Set default auth header for axios\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      \r\n      setLoading(false);\r\n      return { success: true, message: response.data.message || 'Login successful' };\r\n    } catch (error) {\r\n      setLoading(false);\r\n      // Handle network errors or server errors with status codes\r\n      if (error.response) {\r\n        // Server responded with error status\r\n        const errorMsg = error.response.data.error || error.response.data.message || 'Login failed';\r\n        setError(errorMsg);\r\n        return { success: false, error: errorMsg };\r\n      } else if (error.request) {\r\n        // Request was made but no response received\r\n        setError('No response from server. Check your connection.');\r\n        return { success: false, error: 'No response from server. Check your connection.' };\r\n      } else {\r\n        // Something else caused the error\r\n        setError('Failed to login: ' + error.message);\r\n        return { success: false, error: 'Failed to login: ' + error.message };\r\n      }\r\n    }\r\n  };\r\n\r\n  // Register user\r\n  const register = async (name, email, password) => {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      const response = await axios.post(`${API_URL}/register`, {\r\n        userName: name,\r\n        email,\r\n        password\r\n      });\r\n      setLoading(false);\r\n      \r\n      // Check if the response contains an error\r\n      if (response.data.error) {\r\n        setError(response.data.error);\r\n        return { success: false, error: response.data.error };\r\n      }\r\n      \r\n      // Success case\r\n      return { success: true, message: response.data.message || 'User created successfully' };\r\n    } catch (error) {\r\n      setLoading(false);\r\n      // Handle network errors or server errors with status codes\r\n      if (error.response) {\r\n        // Server responded with error status\r\n        const errorMsg = error.response.data.error || error.response.data.message || 'Registration failed';\r\n        setError(errorMsg);\r\n        return { success: false, error: errorMsg };\r\n      } else if (error.request) {\r\n        // Request was made but no response received\r\n        setError('No response from server. Check your connection.');\r\n        return { success: false, error: 'No response from server. Check your connection.' };\r\n      } else {\r\n        // Something else caused the error\r\n        setError('Failed to register: ' + error.message);\r\n        return { success: false, error: 'Failed to register: ' + error.message };\r\n      }\r\n    }\r\n  };\r\n\r\n  // Logout user\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userInfo');\r\n    setCurrentUser(null);\r\n    setIsAdmin(false);\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  };\r\n\r\n  // Check if user is authenticated\r\n  const isAuthenticated = () => {\r\n    return !!currentUser;\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    isAdmin,\r\n    error,\r\n    login,\r\n    register,\r\n    logout,\r\n    isAuthenticated\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}